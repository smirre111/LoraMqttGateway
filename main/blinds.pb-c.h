/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: blinds.proto */

#ifndef PROTOBUF_C_blinds_2eproto__INCLUDED
#define PROTOBUF_C_blinds_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct BlndStatus BlndStatus;
typedef struct BlndLogging BlndLogging;
typedef struct BlndAvailable BlndAvailable;
typedef struct BlndOperationMessage BlndOperationMessage;
typedef struct BlndResponseMessage BlndResponseMessage;


/* --- enums --- */

typedef enum _BlndOperation {
  BLND_OPERATION__CMD_OPEN = 0,
  BLND_OPERATION__CMD_CLOSE = 1,
  BLND_OPERATION__CMD_ENABLE_WIFI = 2,
  BLND_OPERATION__CMD_DISABLE_WIFI = 3,
  BLND_OPERATION__CMD_OTA = 4,
  BLND_OPERATION__CMD_STATUS = 5,
  BLND_OPERATION__CMD_STOP = 6,
  BLND_OPERATION__CMD_IDLE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLND_OPERATION)
} BlndOperation;
typedef enum _BlndResponse {
  BLND_RESPONSE__RESP_STATUS = 0,
  BLND_RESPONSE__RESP_LOG = 1,
  BLND_RESPONSE__RESP_AVAILABLE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLND_RESPONSE)
} BlndResponse;
typedef enum _BlndState {
  BLND_STATE__BLINDS_MQTT_OPEN = 0,
  BLND_STATE__BLINDS_MQTT_OPENING = 1,
  BLND_STATE__BLINDS_MQTT_CLOSING = 2,
  BLND_STATE__BLINDS_MQTT_CLOSED = 3,
  BLND_STATE__BLINDS_MQTT_STOPPED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLND_STATE)
} BlndState;

/* --- messages --- */

struct  BlndStatus
{
  ProtobufCMessage base;
  BlndState state;
  float voltage;
  float position;
};
#define BLND_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blnd_status__descriptor) \
    , BLND_STATE__BLINDS_MQTT_OPEN, 0, 0 }


struct  BlndLogging
{
  ProtobufCMessage base;
  char *logmsg;
};
#define BLND_LOGGING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blnd_logging__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  BlndAvailable
{
  ProtobufCMessage base;
  protobuf_c_boolean available;
};
#define BLND_AVAILABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blnd_available__descriptor) \
    , 0 }


struct  BlndOperationMessage
{
  ProtobufCMessage base;
  uint32_t destaddress;
  uint32_t destsubnet;
  uint32_t senderaddress;
  uint32_t msgid;
  BlndOperation operation;
};
#define BLND_OPERATION_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blnd_operation_message__descriptor) \
    , 0, 0, 0, 0, BLND_OPERATION__CMD_OPEN }


typedef enum {
  BLND_RESPONSE_MESSAGE__PROTO__NOT_SET = 0,
  BLND_RESPONSE_MESSAGE__PROTO_STATE = 10,
  BLND_RESPONSE_MESSAGE__PROTO_LOGGING = 11,
  BLND_RESPONSE_MESSAGE__PROTO_AVAIL = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BLND_RESPONSE_MESSAGE__PROTO__CASE)
} BlndResponseMessage__ProtoCase;

struct  BlndResponseMessage
{
  ProtobufCMessage base;
  uint32_t destaddress;
  uint32_t destsubnet;
  uint32_t senderaddress;
  uint32_t msgid;
  BlndResponse response;
  BlndResponseMessage__ProtoCase proto_case;
  union {
    BlndStatus *state;
    BlndLogging *logging;
    BlndAvailable *avail;
  };
};
#define BLND_RESPONSE_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&blnd_response_message__descriptor) \
    , 0, 0, 0, 0, BLND_RESPONSE__RESP_STATUS, BLND_RESPONSE_MESSAGE__PROTO__NOT_SET, {0} }


/* BlndStatus methods */
void   blnd_status__init
                     (BlndStatus         *message);
size_t blnd_status__get_packed_size
                     (const BlndStatus   *message);
size_t blnd_status__pack
                     (const BlndStatus   *message,
                      uint8_t             *out);
size_t blnd_status__pack_to_buffer
                     (const BlndStatus   *message,
                      ProtobufCBuffer     *buffer);
BlndStatus *
       blnd_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blnd_status__free_unpacked
                     (BlndStatus *message,
                      ProtobufCAllocator *allocator);
/* BlndLogging methods */
void   blnd_logging__init
                     (BlndLogging         *message);
size_t blnd_logging__get_packed_size
                     (const BlndLogging   *message);
size_t blnd_logging__pack
                     (const BlndLogging   *message,
                      uint8_t             *out);
size_t blnd_logging__pack_to_buffer
                     (const BlndLogging   *message,
                      ProtobufCBuffer     *buffer);
BlndLogging *
       blnd_logging__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blnd_logging__free_unpacked
                     (BlndLogging *message,
                      ProtobufCAllocator *allocator);
/* BlndAvailable methods */
void   blnd_available__init
                     (BlndAvailable         *message);
size_t blnd_available__get_packed_size
                     (const BlndAvailable   *message);
size_t blnd_available__pack
                     (const BlndAvailable   *message,
                      uint8_t             *out);
size_t blnd_available__pack_to_buffer
                     (const BlndAvailable   *message,
                      ProtobufCBuffer     *buffer);
BlndAvailable *
       blnd_available__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blnd_available__free_unpacked
                     (BlndAvailable *message,
                      ProtobufCAllocator *allocator);
/* BlndOperationMessage methods */
void   blnd_operation_message__init
                     (BlndOperationMessage         *message);
size_t blnd_operation_message__get_packed_size
                     (const BlndOperationMessage   *message);
size_t blnd_operation_message__pack
                     (const BlndOperationMessage   *message,
                      uint8_t             *out);
size_t blnd_operation_message__pack_to_buffer
                     (const BlndOperationMessage   *message,
                      ProtobufCBuffer     *buffer);
BlndOperationMessage *
       blnd_operation_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blnd_operation_message__free_unpacked
                     (BlndOperationMessage *message,
                      ProtobufCAllocator *allocator);
/* BlndResponseMessage methods */
void   blnd_response_message__init
                     (BlndResponseMessage         *message);
size_t blnd_response_message__get_packed_size
                     (const BlndResponseMessage   *message);
size_t blnd_response_message__pack
                     (const BlndResponseMessage   *message,
                      uint8_t             *out);
size_t blnd_response_message__pack_to_buffer
                     (const BlndResponseMessage   *message,
                      ProtobufCBuffer     *buffer);
BlndResponseMessage *
       blnd_response_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   blnd_response_message__free_unpacked
                     (BlndResponseMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BlndStatus_Closure)
                 (const BlndStatus *message,
                  void *closure_data);
typedef void (*BlndLogging_Closure)
                 (const BlndLogging *message,
                  void *closure_data);
typedef void (*BlndAvailable_Closure)
                 (const BlndAvailable *message,
                  void *closure_data);
typedef void (*BlndOperationMessage_Closure)
                 (const BlndOperationMessage *message,
                  void *closure_data);
typedef void (*BlndResponseMessage_Closure)
                 (const BlndResponseMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    blnd_operation__descriptor;
extern const ProtobufCEnumDescriptor    blnd_response__descriptor;
extern const ProtobufCEnumDescriptor    blnd_state__descriptor;
extern const ProtobufCMessageDescriptor blnd_status__descriptor;
extern const ProtobufCMessageDescriptor blnd_logging__descriptor;
extern const ProtobufCMessageDescriptor blnd_available__descriptor;
extern const ProtobufCMessageDescriptor blnd_operation_message__descriptor;
extern const ProtobufCMessageDescriptor blnd_response_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_blinds_2eproto__INCLUDED */
